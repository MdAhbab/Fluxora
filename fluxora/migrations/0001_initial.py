# Generated by Django 5.2.6 on 2025-09-20 14:32

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('address', models.CharField(max_length=255)),
                ('year_built', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('num_floors', models.IntegerField(blank=True, null=True)),
                ('total_units', models.IntegerField(blank=True, null=True)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('amenities_json', models.JSONField(blank=True, null=True)),
                ('photo_path', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'buildings',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=150, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('password_hash', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('resident', 'Resident'), ('committee', 'Committee'), ('guard', 'Guard'), ('staff', 'Staff'), ('admin', 'Admin')], default='resident', max_length=10)),
                ('is_listed', models.BooleanField(default=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('national_id', models.CharField(blank=True, max_length=50, null=True)),
                ('avatar_path', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='BillType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bill_types',
                'constraints': [models.UniqueConstraint(fields=('name',), name='ux_bill_type')],
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('type', models.CharField(max_length=100)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('warranty_expiry', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('operational', 'operational'), ('under_maintenance', 'under_maintenance'), ('retired', 'retired')], default='operational', max_length=18)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'assets',
            },
        ),
        migrations.CreateModel(
            name='BuildingSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_name', models.CharField(max_length=100)),
                ('value_json', models.JSONField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'building_settings',
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_public', models.BooleanField(default=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'chat_rooms',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('file_path', models.CharField(max_length=255)),
                ('version', models.IntegerField(default=1)),
                ('mime_type', models.CharField(blank=True, max_length=120, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.document')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentACLRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('resident', 'Resident'), ('committee', 'Committee'), ('guard', 'Guard'), ('staff', 'Staff'), ('admin', 'Admin')], max_length=10)),
                ('can_view', models.BooleanField(default=True)),
                ('can_edit', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.document')),
            ],
            options={
                'db_table': 'document_acl_roles',
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('type', models.CharField(choices=[('police', 'Police'), ('fire', 'Fire'), ('ambulance', 'Ambulance'), ('maintenance', 'Maintenance'), ('other', 'Other')], max_length=12)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'emergency_contacts',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('event_date', models.DateTimeField()),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='IntercomDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=100)),
                ('ip_address', models.CharField(max_length=45)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'intercom_devices',
            },
        ),
        migrations.CreateModel(
            name='IntercomLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.intercomdevice')),
            ],
            options={
                'db_table': 'intercom_logs',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='pending', max_length=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bill_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.billtype')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'invoices',
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('utility_bill_id', models.IntegerField(blank=True, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='fluxora.invoice')),
            ],
            options={
                'db_table': 'invoice_items',
            },
        ),
        migrations.CreateModel(
            name='LiftStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Maintenance'), ('offline', 'Offline')], max_length=12)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.asset')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'lift_status_logs',
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('rent', models.DecimalField(decimal_places=2, max_digits=10)),
                ('available_from', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'listings',
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=50)),
                ('artifact_path', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ml_models',
                'constraints': [models.UniqueConstraint(fields=('name', 'version'), name='ux_model_name_version')],
            },
        ),
        migrations.CreateModel(
            name='MLCityPriceCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=120)),
                ('currency', models.CharField(default='BDT', max_length=10)),
                ('estimate', models.DecimalField(decimal_places=2, max_digits=12)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.mlmodel')),
            ],
            options={
                'db_table': 'ml_city_price_cache',
            },
        ),
        migrations.CreateModel(
            name='MLTrainingRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('params_json', models.JSONField(blank=True, null=True)),
                ('metrics_json', models.JSONField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_runs', to='fluxora.mlmodel')),
            ],
            options={
                'db_table': 'ml_training_runs',
            },
        ),
        migrations.CreateModel(
            name='ParkingSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_number', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('available', 'available'), ('occupied', 'occupied'), ('reserved', 'reserved')], default='available', max_length=9)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'parking_slots',
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'polls',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.CharField(max_length=200)),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='fluxora.poll')),
            ],
            options={
                'db_table': 'options',
            },
        ),
        migrations.CreateModel(
            name='RentalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=8)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='fluxora.listing')),
            ],
            options={
                'db_table': 'rental_requests',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_path', models.CharField(max_length=255)),
                ('signed_at', models.DateTimeField()),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.rentalrequest')),
            ],
            options={
                'db_table': 'contracts',
            },
        ),
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False)),
                ('opt_in', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.building')),
            ],
            options={
                'db_table': 'residents',
            },
        ),
        migrations.AddField(
            model_name='rentalrequest',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('method', models.CharField(max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.invoice')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('resident', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='fluxora.chatroom')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'messages',
            },
        ),
        migrations.AddField(
            model_name='listing',
            name='resident',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='resident',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident'),
        ),
        migrations.CreateModel(
            name='EventAttendee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('going', 'Going'), ('not_going', 'Not Going')], default='interested', max_length=11)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.event')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'event_attendees',
            },
        ),
        migrations.CreateModel(
            name='Emergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'emergencies',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visitor_name', models.CharField(max_length=100)),
                ('visitor_phone', models.CharField(max_length=20)),
                ('scheduled_time', models.DateTimeField()),
                ('approved', models.BooleanField(default=False)),
                ('qr_token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'appointments',
            },
        ),
        migrations.CreateModel(
            name='AccessCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.CharField(max_length=100, unique=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('lost', 'Lost')], default='active', max_length=8)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'access_cards',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('capacity', models.IntegerField(default=1)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'resources',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('purpose', models.CharField(blank=True, max_length=150, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resource')),
            ],
            options={
                'db_table': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='RoomMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.resident')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.chatroom')),
            ],
            options={
                'db_table': 'room_members',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.service')),
            ],
            options={
                'db_table': 'services',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('role', models.CharField(max_length=50)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('qualifications', models.TextField(blank=True, null=True)),
                ('contact_info', models.CharField(blank=True, max_length=100, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'staff',
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkin_time', models.DateTimeField()),
                ('checkout_time', models.DateTimeField(blank=True, null=True)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.staff')),
            ],
            options={
                'db_table': 'attendance',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=12)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.staff')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'tickets',
            },
        ),
        migrations.CreateModel(
            name='TicketImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.CharField(max_length=255)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='fluxora.ticket')),
            ],
            options={
                'db_table': 'ticket_images',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_number', models.CharField(max_length=50)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('studio', 'Studio'), ('1BHK', '1BHK'), ('2BHK', '2BHK'), ('3BHK', '3BHK'), ('duplex', 'Duplex'), ('shop', 'Shop'), ('office', 'Office')], default='1BHK', max_length=10)),
                ('size_sqft', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('available', 'Available'), ('occupied', 'Occupied'), ('sold', 'Sold'), ('rented', 'Rented')], default='available', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'units',
            },
        ),
        migrations.AddField(
            model_name='resident',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.unit'),
        ),
        migrations.AddField(
            model_name='listing',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.unit'),
        ),
        migrations.AddField(
            model_name='resident',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.user'),
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('publish_date', models.DateTimeField()),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'notices',
            },
        ),
        migrations.CreateModel(
            name='GateEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('open', 'Open'), ('close', 'Close')], max_length=5)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'gate_events',
            },
        ),
        migrations.CreateModel(
            name='DocumentAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('view', 'View'), ('download', 'Download'), ('edit', 'Edit'), ('delete', 'Delete')], max_length=8)),
                ('event_time', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'document_audit_logs',
            },
        ),
        migrations.CreateModel(
            name='DocumentACLUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True)),
                ('can_edit', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'document_acl_users',
            },
        ),
        migrations.AddField(
            model_name='building',
            name='developer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='developed_buildings', to='fluxora.user'),
        ),
        migrations.AddField(
            model_name='building',
            name='primary_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_contact_buildings', to='fluxora.user'),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('action', models.CharField(max_length=50)),
                ('details_json', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'activity_logs',
            },
        ),
        migrations.CreateModel(
            name='UtilityMeter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('electricity', 'Electricity'), ('water', 'Water'), ('gas', 'Gas')], max_length=11)),
                ('meter_number', models.CharField(max_length=100, unique=True)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.unit')),
            ],
            options={
                'db_table': 'utility_meters',
            },
        ),
        migrations.CreateModel(
            name='UtilityBill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reading_date', models.DateField()),
                ('reading_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='pending', max_length=7)),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.utilitymeter')),
            ],
            options={
                'db_table': 'utility_bills',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_number', models.CharField(max_length=50, unique=True)),
                ('type', models.CharField(choices=[('car', 'Car'), ('motorbike', 'Motorbike'), ('bicycle', 'Bicycle'), ('other', 'Other')], default='car', max_length=10)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('parking_slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.parkingslot')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'vehicles',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('contact_info', models.CharField(blank=True, max_length=255, null=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.service')),
            ],
            options={
                'db_table': 'vendors',
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='service_vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.vendor'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.vendor')),
            ],
            options={
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('receipt_path', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.vendor')),
            ],
            options={
                'db_table': 'expenses',
            },
        ),
        migrations.CreateModel(
            name='AssetMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_date', models.DateField()),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fluxora.asset')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.vendor')),
            ],
            options={
                'db_table': 'asset_maintenance',
            },
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkin_time', models.DateTimeField(blank=True, null=True)),
                ('checkout_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('checked_in', 'Checked In'), ('checked_out', 'Checked Out')], default='pending', max_length=12)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.appointment')),
                ('handled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='fluxora.user')),
            ],
            options={
                'db_table': 'visitors',
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voted_at', models.DateTimeField(auto_now_add=True)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.option')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.poll')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.resident')),
            ],
            options={
                'db_table': 'votes',
            },
        ),
        migrations.CreateModel(
            name='WasteSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_time', models.DateTimeField()),
                ('recurring', models.CharField(blank=True, max_length=50, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fluxora.building')),
            ],
            options={
                'db_table': 'waste_schedules',
            },
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['building'], name='idx_assets_building'),
        ),
        migrations.AddConstraint(
            model_name='buildingsetting',
            constraint=models.UniqueConstraint(fields=('building', 'key_name'), name='ux_building_setting'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['building'], name='idx_chat_rooms_building'),
        ),
        migrations.AddConstraint(
            model_name='documentaclrole',
            constraint=models.UniqueConstraint(fields=('document', 'role'), name='ux_doc_role'),
        ),
        migrations.AddIndex(
            model_name='emergencycontact',
            index=models.Index(fields=['building'], name='idx_emergency_bldg'),
        ),
        migrations.AddConstraint(
            model_name='intercomdevice',
            constraint=models.UniqueConstraint(fields=('building', 'ip_address'), name='ux_intercom_building_ip'),
        ),
        migrations.AddIndex(
            model_name='intercomlog',
            index=models.Index(fields=['device', 'timestamp'], name='idx_intercom_logs_device'),
        ),
        migrations.AddIndex(
            model_name='liftstatuslog',
            index=models.Index(fields=['building', 'timestamp'], name='idx_lift_logs_building'),
        ),
        migrations.AddConstraint(
            model_name='mlcitypricecache',
            constraint=models.UniqueConstraint(fields=('city', 'model'), name='ux_city_model'),
        ),
        migrations.AddConstraint(
            model_name='parkingslot',
            constraint=models.UniqueConstraint(fields=('building', 'slot_number'), name='ux_parking_slot'),
        ),
        migrations.AddIndex(
            model_name='rentalrequest',
            index=models.Index(fields=['listing'], name='idx_rental_requests_listing'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_date'], name='idx_payments_date'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['building', 'sent_at'], name='idx_notifications_building'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['resident', 'is_read'], name='idx_notifications_resident'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['room', 'sent_at'], name='idx_messages_room'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='idx_invoices_due'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['status'], name='idx_invoices_status'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['building'], name='idx_invoices_building'),
        ),
        migrations.AddConstraint(
            model_name='eventattendee',
            constraint=models.UniqueConstraint(fields=('event', 'resident'), name='ux_event_attendee'),
        ),
        migrations.AddIndex(
            model_name='emergency',
            index=models.Index(fields=['building', 'timestamp'], name='idx_emergencies_building'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['building', 'scheduled_time'], name='idx_appointments_building_time'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['building'], name='idx_resources_building'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['resource', 'start_time'], name='idx_booking_window'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['resident', 'start_time'], name='idx_booking_resident'),
        ),
        migrations.AddConstraint(
            model_name='booking',
            constraint=models.UniqueConstraint(fields=('resource', 'start_time', 'end_time'), name='ux_booking_exact'),
        ),
        migrations.AddConstraint(
            model_name='roommember',
            constraint=models.UniqueConstraint(fields=('room', 'resident'), name='ux_room_member'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['staff', 'checkin_time'], name='idx_attendance_staff'),
        ),
        migrations.AddConstraint(
            model_name='unit',
            constraint=models.UniqueConstraint(fields=('building', 'unit_number'), name='ux_unit'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['building'], name='idx_listings_building'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['unit'], name='idx_listings_unit'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['building'], name='idx_staff_building'),
        ),
        migrations.AddConstraint(
            model_name='resident',
            constraint=models.UniqueConstraint(fields=('user', 'building'), name='ux_resident_building'),
        ),
        migrations.AddIndex(
            model_name='poll',
            index=models.Index(fields=['building'], name='idx_polls_building'),
        ),
        migrations.AddIndex(
            model_name='notice',
            index=models.Index(fields=['building'], name='idx_notices_building'),
        ),
        migrations.AddIndex(
            model_name='gateevent',
            index=models.Index(fields=['building', 'timestamp'], name='idx_gate_events_building'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['building', 'event_date'], name='idx_events_building'),
        ),
        migrations.AddConstraint(
            model_name='documentacluser',
            constraint=models.UniqueConstraint(fields=('document', 'user'), name='ux_doc_user'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['building'], name='idx_documents_building'),
        ),
        migrations.AddConstraint(
            model_name='utilitymeter',
            constraint=models.UniqueConstraint(fields=('unit', 'type'), name='ux_meter_unit_type'),
        ),
        migrations.AddIndex(
            model_name='utilitybill',
            index=models.Index(fields=['meter', 'reading_date'], name='idx_utility_bills_meter'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['building'], name='idx_vendor_building'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['service'], name='idx_vendor_service'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['building', 'status'], name='idx_tickets_building_status'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to'], name='idx_tickets_assigned'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['vendor'], name='idx_reviews_vendor'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['resident'], name='idx_reviews_resident'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['building', 'date'], name='idx_expenses_building_date'),
        ),
        migrations.AddIndex(
            model_name='assetmaintenance',
            index=models.Index(fields=['asset', 'scheduled_date'], name='idx_asset_maintenance_asset'),
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.UniqueConstraint(fields=('poll', 'resident'), name='ux_one_vote'),
        ),
        migrations.AddIndex(
            model_name='wasteschedule',
            index=models.Index(fields=['building', 'schedule_time'], name='idx_waste_schedule_building'),
        ),
    ]
